package segment

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Pointer) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Len":
			z.Len, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Len")
				return
			}
		case "Off":
			z.Off, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Off")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Pointer) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Len"
	err = en.Append(0x82, 0xa3, 0x4c, 0x65, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Len)
	if err != nil {
		err = msgp.WrapError(err, "Len")
		return
	}
	// write "Off"
	err = en.Append(0xa3, 0x4f, 0x66, 0x66)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Off)
	if err != nil {
		err = msgp.WrapError(err, "Off")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Pointer) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Len"
	o = append(o, 0x82, 0xa3, 0x4c, 0x65, 0x6e)
	o = msgp.AppendInt(o, z.Len)
	// string "Off"
	o = append(o, 0xa3, 0x4f, 0x66, 0x66)
	o = msgp.AppendInt(o, z.Off)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Pointer) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Len":
			z.Len, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Len")
				return
			}
		case "Off":
			z.Off, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Off")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Pointer) Msgsize() (s int) {
	s = 1 + 4 + msgp.IntSize + 4 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Pointers) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Data":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
			if z.Data == nil {
				z.Data = make(map[string]map[string]Pointer, zb0002)
			} else if len(z.Data) > 0 {
				for key := range z.Data {
					delete(z.Data, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 map[string]Pointer
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Data")
					return
				}
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Data", za0001)
					return
				}
				if za0002 == nil {
					za0002 = make(map[string]Pointer, zb0003)
				} else if len(za0002) > 0 {
					for key := range za0002 {
						delete(za0002, key)
					}
				}
				for zb0003 > 0 {
					zb0003--
					var za0003 string
					var za0004 Pointer
					za0003, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "Data", za0001)
						return
					}
					var zb0004 uint32
					zb0004, err = dc.ReadMapHeader()
					if err != nil {
						err = msgp.WrapError(err, "Data", za0001, za0003)
						return
					}
					for zb0004 > 0 {
						zb0004--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							err = msgp.WrapError(err, "Data", za0001, za0003)
							return
						}
						switch msgp.UnsafeString(field) {
						case "Len":
							za0004.Len, err = dc.ReadInt()
							if err != nil {
								err = msgp.WrapError(err, "Data", za0001, za0003, "Len")
								return
							}
						case "Off":
							za0004.Off, err = dc.ReadInt()
							if err != nil {
								err = msgp.WrapError(err, "Data", za0001, za0003, "Off")
								return
							}
						default:
							err = dc.Skip()
							if err != nil {
								err = msgp.WrapError(err, "Data", za0001, za0003)
								return
							}
						}
					}
					za0002[za0003] = za0004
				}
				z.Data[za0001] = za0002
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Pointers) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Data"
	err = en.Append(0x81, 0xa4, 0x44, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Data)))
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	for za0001, za0002 := range z.Data {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Data")
			return
		}
		err = en.WriteMapHeader(uint32(len(za0002)))
		if err != nil {
			err = msgp.WrapError(err, "Data", za0001)
			return
		}
		for za0003, za0004 := range za0002 {
			err = en.WriteString(za0003)
			if err != nil {
				err = msgp.WrapError(err, "Data", za0001)
				return
			}
			// map header, size 2
			// write "Len"
			err = en.Append(0x82, 0xa3, 0x4c, 0x65, 0x6e)
			if err != nil {
				return
			}
			err = en.WriteInt(za0004.Len)
			if err != nil {
				err = msgp.WrapError(err, "Data", za0001, za0003, "Len")
				return
			}
			// write "Off"
			err = en.Append(0xa3, 0x4f, 0x66, 0x66)
			if err != nil {
				return
			}
			err = en.WriteInt(za0004.Off)
			if err != nil {
				err = msgp.WrapError(err, "Data", za0001, za0003, "Off")
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Pointers) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Data"
	o = append(o, 0x81, 0xa4, 0x44, 0x61, 0x74, 0x61)
	o = msgp.AppendMapHeader(o, uint32(len(z.Data)))
	for za0001, za0002 := range z.Data {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendMapHeader(o, uint32(len(za0002)))
		for za0003, za0004 := range za0002 {
			o = msgp.AppendString(o, za0003)
			// map header, size 2
			// string "Len"
			o = append(o, 0x82, 0xa3, 0x4c, 0x65, 0x6e)
			o = msgp.AppendInt(o, za0004.Len)
			// string "Off"
			o = append(o, 0xa3, 0x4f, 0x66, 0x66)
			o = msgp.AppendInt(o, za0004.Off)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Pointers) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Data":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
			if z.Data == nil {
				z.Data = make(map[string]map[string]Pointer, zb0002)
			} else if len(z.Data) > 0 {
				for key := range z.Data {
					delete(z.Data, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 map[string]Pointer
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Data")
					return
				}
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Data", za0001)
					return
				}
				if za0002 == nil {
					za0002 = make(map[string]Pointer, zb0003)
				} else if len(za0002) > 0 {
					for key := range za0002 {
						delete(za0002, key)
					}
				}
				for zb0003 > 0 {
					var za0003 string
					var za0004 Pointer
					zb0003--
					za0003, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Data", za0001)
						return
					}
					var zb0004 uint32
					zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Data", za0001, za0003)
						return
					}
					for zb0004 > 0 {
						zb0004--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "Data", za0001, za0003)
							return
						}
						switch msgp.UnsafeString(field) {
						case "Len":
							za0004.Len, bts, err = msgp.ReadIntBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "Data", za0001, za0003, "Len")
								return
							}
						case "Off":
							za0004.Off, bts, err = msgp.ReadIntBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "Data", za0001, za0003, "Off")
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								err = msgp.WrapError(err, "Data", za0001, za0003)
								return
							}
						}
					}
					za0002[za0003] = za0004
				}
				z.Data[za0001] = za0002
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Pointers) Msgsize() (s int) {
	s = 1 + 5 + msgp.MapHeaderSize
	if z.Data != nil {
		for za0001, za0002 := range z.Data {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.MapHeaderSize
			if za0002 != nil {
				for za0003, za0004 := range za0002 {
					_ = za0004
					s += msgp.StringPrefixSize + len(za0003) + 1 + 4 + msgp.IntSize + 4 + msgp.IntSize
				}
			}
		}
	}
	return
}
